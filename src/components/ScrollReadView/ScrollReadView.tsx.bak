'use client';

import React, { useEffect, useState, useRef, useCallback } from 'react';
import './ScrollReadView.css';

interface ScrollReadViewProps {
  surahNumber: number;
  surahName: string;
  totalVerses: number;
  backgroundImageUrl: string;
  onBack: () => void;
}

interface Verse {
  number: number;
  text: string;
  translation: string;
}

export default function ScrollReadView({
  surahNumber,
  surahName,
  totalVerses,
  backgroundImageUrl,
  onBack
}: ScrollReadViewProps) {
  const [verses, setVerses] = useState<Verse[]>([]);
  const [currentVerse, setCurrentVerse] = useState<number>(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    async function fetchVerses() {
      try {
        setLoading(true);
        const [arabicResponse, translationResponse] = await Promise.all([
          fetch(`https://api.alquran.cloud/v1/surah/${surahNumber}/quran-uthmani`),
          fetch(`https://api.alquran.cloud/v1/surah/${surahNumber}/en.asad`)
        ]);

        const arabicData = await arabicResponse.json();
        const translationData = await translationResponse.json();

        if (arabicData.code === 200 && translationData.code === 200) {
          const combinedVerses = arabicData.data.ayahs.map((verse: any, index: number) => ({
            number: verse.numberInSurah,
            text: verse.text,
            translation: translationData.data.ayahs[index].text
          }));
          setVerses(combinedVerses);
        } else {
          throw new Error('Failed to fetch verses');
        }
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load verses');
      } finally {
        setLoading(false);
      }
    }

    fetchVerses();
  }, [surahNumber]);

  const scrollToVerse = useCallback((verseNumber: number) => {
    const verseElement = document.querySelector(`[data-verse="${verseNumber}"]`);
    if (verseElement) {
      verseElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  }, []);

  if (loading) {
    return (
      <div className="quran-container">
        <div className="loading-state">
          <div className="spinner" />
          <p>Loading Surah {surahName}...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="quran-container">
        <div className="error-state">
          <h3>Error Loading Surah</h3>
          <p>{error}</p>
          <button onClick={onBack}>Return to Surah List</button>
        </div>
      </div>
    );
  }

  return (
    <div className="quran-container">
      <div className="quran-header">
        <button onClick={onBack} className="back-button">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <path d="M19 12H5M12 19l-7-7 7-7" />
          </svg>
          Back
        </button>
        <h1 className="surah-title">
          {surahName} <span className="verse-count">({currentVerse}/{totalVerses})</span>
        </h1>
      </div>

      <div className="verses-wrapper" ref={containerRef}>
        {verses.map((verse) => (
          <div
            key={verse.number}
            data-verse={verse.number}
            className={`verse-container ${currentVerse === verse.number ? 'active' : ''}`}
          >
            <div className="verse-header">
              <span className="verse-number">{verse.number}</span>
            </div>
            <div className="verse-content">
              <div className="arabic-text">{verse.text}</div>
              <div className="translation-text">{verse.translation}</div>
            </div>
          </div>
        ))}
      </div>

      <div className="navigation-controls">
        <button
          className="nav-button"
          onClick={() => {
            if (currentVerse > 1) {
              setCurrentVerse(prev => prev - 1);
              scrollToVerse(currentVerse - 1);
            }
          }}
          disabled={currentVerse === 1}
        >
          Previous
        </button>
        <button
          className="nav-button"
          onClick={() => {
            if (currentVerse < totalVerses) {
              setCurrentVerse(prev => prev + 1);
              scrollToVerse(currentVerse + 1);
            }
          }}
          disabled={currentVerse === totalVerses}
        >
          Next
        </button>
      </div>
    </div>
  );
}